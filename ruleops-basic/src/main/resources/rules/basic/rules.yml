name: rules.basic
imports:
- java.util.Map
- org.drools.ruleops.Utils
- org.drools.ruleops.DroolsUtils
- org.drools.ruleops.DroolsK8sClient
- org.drools.ruleops.EDAnsibleClient
- org.drools.ruleops.model.Advice
- io.fabric8.kubernetes.api.model.Container
- io.fabric8.kubernetes.api.model.ContainerPort
- io.fabric8.kubernetes.api.model.Event
- io.fabric8.kubernetes.api.model.PersistentVolumeClaim
- io.fabric8.kubernetes.api.model.Pod
- io.fabric8.kubernetes.api.model.Service
- io.fabric8.kubernetes.api.model.ServicePort
- io.fabric8.kubernetes.api.model.Volume
- io.fabric8.kubernetes.api.model.apps.StatefulSet
- io.fabric8.kubernetes.api.model.apps.StatefulSetCondition
- io.fabric8.kubernetes.api.model.apps.Deployment
- io.fabric8.kubernetes.api.model.apps.DeploymentCondition
- io.fabric8.kubernetes.api.model.Quantity
rules:
- name: Relax the ResourceQuota limits Deployment PENDING
  when:
  - given: Deployment
    as: $d
  - exists:
    - all:
      - given: DeploymentCondition
        having:
        - type == "Available"
        - status == "False"
        from: $d.status.conditions
      - given: DeploymentCondition
        having:
        - message contains "exceeded quota"
        from: $d.status.conditions
  then: |
    insert(new Advice("Relax the ResourceQuota limits","Deployment PENDING: "+$d.getMetadata().getName()));
- name: Relax the ResourceQuota limits StatefulSet PENDING
  when:
  - given: StatefulSet
    as: $s
    having:
    - spec.replicas != status.replicas
  - exists:
    - given: Event
      having:
      - message contains "exceeded quota"
      from: DroolsK8sClient.eventsFor($s)
  then: |
    insert(new Advice("Relax the ResourceQuota limits","StatefulSet PENDING: "+$s.getMetadata().getName()));
- name: Fix the PersistentVolume Claim Pod PENDING
  when:
  - given: PersistentVolumeClaim
    as: $pvc
    having:
    - status.phase == "Pending"
  - given: Pod
    as: $pod
    having:
    - status.phase == "Pending"
  - given: Volume
    having:
    - persistentVolumeClaim!.claimName == $pvc.metadata.name
    from: $pod.spec.volumes
  then: |
    insert(new Advice("Fix the PersistentVolume","Pod PENDING: "+$pod.getMetadata().getName() + " pvc PENDING: "+$pvc.getMetadata().getName()));
      EDAnsibleClient.with("provision", "PersistentVolume").with("capacity", $pvc.getSpec().getResources().getRequests().get("storage")).sendEvent();
- name: Fix the Service selector No Pod found for selector
  when:
  - given: Service
    as: $svc
    having:
    - metadata.name != "kubernetes"
  - not:
    - given: Pod
      having:
      - "mapContains(metadata.labels, $svc.spec.selector)"
  then: |
    insert(new Advice("Fix the Service selector","Service "+$svc.getMetadata().getName()+" no Pod found for selector: "+$svc.getSpec().getSelector()));
- name: "Fix the Service selector matches Pod name, but other selectors don't"
  when:
  - given: Service
    as: $svc
    having:
    - metadata.name != "kubernetes"
    - "$selectorName: spec!.selector[\"app.kubernetes.io/name\"]"
  - given: Pod
    as: $pod
    having:
    - "metadata.labels[\"app.kubernetes.io/name\"] == $selectorName"
    - "!mapContains(metadata.labels, $svc.spec.selector)"
  then: |
    insert(new Advice("Fix the Service selector","Service "+$svc.getMetadata().getName()+" selector matches Pod name, but other selectors: '"+DroolsUtils.notFoundMap($svc.getSpec().getSelector(), $pod.getMetadata().getLabels())+"' did not match in the candidate Pod: "+$pod.getMetadata().getLabels()));
- name: Fix the Service selector sounds like Pod name but not an exact match
  when:
  - given: Service
    as: $svc
    having:
    - metadata.name != "kubernetes"
    - "$selectorName: spec!.selector[\"app.kubernetes.io/name\"]"
  - given: Pod
    as: $pod
    having:
    - "metadata.labels[\"app.kubernetes.io/name\"] != $selectorName"
    - "metadata.labels[\"app.kubernetes.io/name\"] soundslike $selectorName"
  then: |
    insert(new Advice("Service selector hint","Service "+$svc.getMetadata().getName()+" selector sounds-like Pod "+$pod.getMetadata().getName()+", but not an exact match: "+$pod.getMetadata().getLabels()));
- name: Fix the Service targetPort and the containerPort
  when:
  - given: Service
    as: $svc
    having:
    - metadata.name != "kubernetes"
  - given: ServicePort
    as: $sPort
    from: $svc.spec.ports
  - given: Pod
    as: $pod
    having:
    - "mapContains(metadata.labels, $svc.spec.selector)"
  - not:
    - all:
      - given: Container
        as: $c
        from: $pod.spec.containers
      - given: ContainerPort
        having:
        - containerPort == $sPort.targetPort.intVal
        from: $c.ports
  then: "insert(new Advice(\"Fix the Service targetPort and the containerPort\",\"\
    Service \" + \n      $svc.getMetadata().getName() +\n      \" targetPort: \" +\n\
    \      $sPort.getTargetPort() +\n      \" not found in any Container of related\
    \ Pod: \" +\n      $pod.getMetadata().getName()\n  ));\n"
functions:
- name: mapContains
  returnType: boolean
  parameters:
  - name: left
    type: Map
  - name: right
    type: Map
  body: |-
    if (left == null) {
        return right == null;
      }
      if (right == null) {
        return false;
      }
      return left.entrySet().containsAll(right.entrySet());
